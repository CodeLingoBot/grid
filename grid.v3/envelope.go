package grid

import (
	"bytes"
	"context"
	"encoding/gob"
)

const Ack = "__ACK__"

// Envelope for delivered request and response messages.
type Envelope struct {
	Msg      interface{}
	context  context.Context
	response chan []byte
}

// Context of envelope's request.
func (env *Envelope) Context() context.Context {
	if env.response == nil {
		panic("only received envelopes may call context")
	}
	return env.context
}

// Ack envelope delivery, same as responding with Respond
// and constant "Ack".
func (env *Envelope) Ack() {
	if env.response == nil {
		panic("only received envelopes may call ack")
	}
	env.Respond(Ack)
}

// Respond to envelope delivery with a message.
func (env *Envelope) Respond(msg interface{}) error {
	if env.response == nil {
		panic("only received envelopes may call respond")
	}

	res := &Envelope{
		Msg: msg,
	}

	// Encode the message here, eg: in the Envelope, rather
	// than in Messenger, because it should be done by the
	// receiver's go-routine, otherwise there is a risk
	// that pointers in the message might actuall need
	// locking to be read-safe.
	var buf bytes.Buffer
	enc := gob.NewEncoder(&buf)
	err := enc.Encode(res)
	if err != nil {
		return err
	}

	// Send the response bytes. Again, the bytes need
	// to be generated by the receiver's go-routine.
	env.response <- buf.Bytes()
	return nil
}
