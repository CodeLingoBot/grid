package grid

import (
	"bytes"
	"context"
	"encoding/gob"
)

// Ack is the message sent back when the Ack() method of a
// request is called.
const Ack = "__ACK__"

// envelope for delivered request and response messages.
type envelope struct {
	Msg interface{}
}

// Request which must receive an ack or response.
type Request interface {
	Context() context.Context
	Msg() interface{}
	Ack()
	Respond(msg interface{}) error
}

type request struct {
	msg      interface{}
	context  context.Context
	response chan []byte
}

// Context of request.
func (req *request) Context() context.Context {
	return req.context
}

// Msg of the request.
func (req *request) Msg() interface{} {
	return req.msg
}

// Ack request, same as responding with Respond
// and constant "Ack".
func (req *request) Ack() {
	req.Respond(Ack)
}

// Respond to request with a message.
func (req *request) Respond(msg interface{}) error {
	env := &envelope{
		Msg: msg,
	}

	// Encode the message here, otherwise there is a risk
	// that pointers in the message might actuall need
	// locking to be read-safe.
	var buf bytes.Buffer
	enc := gob.NewEncoder(&buf)
	err := enc.Encode(env)
	if err != nil {
		return err
	}

	// Send the response bytes. Again, the bytes need
	// to be generated by the receiver's go-routine.
	req.response <- buf.Bytes()
	return nil
}
